[{"url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/658","repository_url":"https://api.github.com/repos/ClickHouse/ClickHouse","labels_url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/658/labels{/name}","comments_url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/658/comments","events_url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/658/events","html_url":"https://github.com/ClickHouse/ClickHouse/issues/658","id":219857985,"node_id":"MDU6SXNzdWUyMTk4NTc5ODU=","number":658,"title":"Feature request: evaluate and prune constant expressions before columns' scanning","user":{"login":"valyala","id":283442,"node_id":"MDQ6VXNlcjI4MzQ0Mg==","avatar_url":"https://avatars.githubusercontent.com/u/283442?v=4","gravatar_id":"","url":"https://api.github.com/users/valyala","html_url":"https://github.com/valyala","followers_url":"https://api.github.com/users/valyala/followers","following_url":"https://api.github.com/users/valyala/following{/other_user}","gists_url":"https://api.github.com/users/valyala/gists{/gist_id}","starred_url":"https://api.github.com/users/valyala/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/valyala/subscriptions","organizations_url":"https://api.github.com/users/valyala/orgs","repos_url":"https://api.github.com/users/valyala/repos","events_url":"https://api.github.com/users/valyala/events{/privacy}","received_events_url":"https://api.github.com/users/valyala/received_events","type":"User","site_admin":false},"labels":[{"id":756395244,"node_id":"MDU6TGFiZWw3NTYzOTUyNDQ=","url":"https://api.github.com/repos/ClickHouse/ClickHouse/labels/performance","name":"performance","color":"c2e0c6","default":false,"description":null},{"id":1401777979,"node_id":"MDU6TGFiZWwxNDAxNzc3OTc5","url":"https://api.github.com/repos/ClickHouse/ClickHouse/labels/comp-optimizers","name":"comp-optimizers","color":"b5bcff","default":false,"description":"Query optimizations"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2017-04-06T10:47:16Z","updated_at":"2020-10-16T18:10:40Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"### The issue\r\n\r\nSuppose the following table exists:\r\n\r\n```sql\r\nCREATE TABLE events (\r\n    EventDate Date,\r\n    ClientID UInt32\r\n) Engine = MergeTree(EventDate, (EventDate, ClientID), 8192);\r\n```\r\n\r\nWe use the following query template for counting the number of events for the given client on the given date:\r\n\r\n```sql\r\nSELECT count(*) FROM events\r\nWHERE EventDate = <EventDate> AND (ClientID = <ClientID> OR -1 = <ClientID>)\r\n```\r\n\r\nThe `-1 = <ClientID>` part is used for selecting the total number of events for the given `EventDate`. `<ClientID>` is substituted by `-1` in this case.\r\n\r\nUnfortunately, this part disables `(EventDate, ClientID)` key usage, so the `clickhouse` scans all the rows for the given `EventDate` even if `ClientID` isn't equal to `-1`.\r\n\r\n### The solution\r\n\r\nIt would be great if `clickhouse` could evaluate and prune constant expressions before columns' scanning.\r\n\r\nFor instance, for `EventDate = '2017-04-01'` and `ClientID = 42` the query becomes:\r\n```sql\r\nSELECT count(*) FROM events\r\nWHERE EventDate = '2017-04-01' AND (ClientID = 42 OR -1 = 42)\r\n```\r\nThe `-1 = 42` constant part is always evaluated to `false`, so it could be safely pruned. Then the query transforms to:\r\n```sql\r\nSELECT count(*) FROM events\r\nWHERE EventDate = '2017-04-01' AND ClientID = 42\r\n```\r\nThis query successfully uses `(EventDate, ClientID)` key.\r\n\r\nFor `ClientID = -1` the query looks like:\r\n```sql\r\nSELECT count(*) FROM events\r\nWHERE EventDate = '2017-04-01' AND (ClientID = -1 OR -1 = -1)\r\n```\r\nThe `-1 = -1` part is always evaluated to `true`, so the `ClientID = -1` part could be safely pruned. Then the query transforms to:\r\n```sql\r\nSELECT count(*) FROM events\r\nWHERE EventDate = '2017-04-01'\r\n```\r\n\r\nIt would be great if the constant expression evaluation would work for `IN` operators too, so the following construction could be optimized:\r\n\r\n`(ClientID IN (<ClientIDs>) OR -1 IN (<ClientIDs>))`\r\n\r\n### Possible workaround\r\n\r\n- To use distinct query templates depending on whether the `ClientID` is selected or not. Unfortunately, this doesn't work for `grafana` templates when using [clickhouse-grafana](https://github.com/Vertamedia/clickhouse-grafana).","reactions":{"url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/658/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/658/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/448","repository_url":"https://api.github.com/repos/ClickHouse/ClickHouse","labels_url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/448/labels{/name}","comments_url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/448/comments","events_url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/448/events","html_url":"https://github.com/ClickHouse/ClickHouse/issues/448","id":205038933,"node_id":"MDU6SXNzdWUyMDUwMzg5MzM=","number":448,"title":"materialized view weird issue","user":{"login":"bozerkins","id":5130614,"node_id":"MDQ6VXNlcjUxMzA2MTQ=","avatar_url":"https://avatars.githubusercontent.com/u/5130614?v=4","gravatar_id":"","url":"https://api.github.com/users/bozerkins","html_url":"https://github.com/bozerkins","followers_url":"https://api.github.com/users/bozerkins/followers","following_url":"https://api.github.com/users/bozerkins/following{/other_user}","gists_url":"https://api.github.com/users/bozerkins/gists{/gist_id}","starred_url":"https://api.github.com/users/bozerkins/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bozerkins/subscriptions","organizations_url":"https://api.github.com/users/bozerkins/orgs","repos_url":"https://api.github.com/users/bozerkins/repos","events_url":"https://api.github.com/users/bozerkins/events{/privacy}","received_events_url":"https://api.github.com/users/bozerkins/received_events","type":"User","site_admin":false},"labels":[{"id":1350221495,"node_id":"MDU6TGFiZWwxMzUwMjIxNDk1","url":"https://api.github.com/repos/ClickHouse/ClickHouse/labels/comp-matview","name":"comp-matview","color":"b5bcff","default":false,"description":"Materialized views"},{"id":1357578153,"node_id":"MDU6TGFiZWwxMzU3NTc4MTUz","url":"https://api.github.com/repos/ClickHouse/ClickHouse/labels/comp-joins","name":"comp-joins","color":"b5bcff","default":false,"description":"JOINs"},{"id":1575085465,"node_id":"MDU6TGFiZWwxNTc1MDg1NDY1","url":"https://api.github.com/repos/ClickHouse/ClickHouse/labels/unexpected%20behaviour","name":"unexpected behaviour","color":"e088ca","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2017-02-03T00:26:48Z","updated_at":"2021-05-31T16:49:46Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"i created first table:\r\nCREATE TABLE test.a ( a UInt64,  b UInt64) ENGINE = TinyLog;\r\n\r\nthen second one:\r\nCREATE TABLE test.b ( b UInt64) ENGINE = TinyLog;\r\n\r\nthen a materialized view with some random SQL:\r\nCREATE MATERIALIZED VIEW test.view_4 ( bb UInt64,  cnt UInt64) POPULATE AS SELECT bb, count() AS cnt FROM (SELECT a, b AS j, b AS bb FROM test.a  ANY INNER JOIN (SELECT b AS j, b AS bb FROM b ) USING (j))  GROUP BY bb;\r\n\r\nthen i run an SQL to insert data into \"a\" table:\r\ninsert into a (a,b) values (1,2);\r\n\r\nand got an error:\r\nReceived exception from server:\r\nCode: 10. DB::Exception: Received from localhost:9000, 127.0.0.1. DB::Exception: Not found column bb in block. There are only columns: a, b. \r\n\r\n\r\nThat's probably bad.\r\nSome thoughts:\r\napart from i cannot really understand why there's an error, it could be nice if materialized views didn't prevent from inserting data into original tables (when, for example, there's smth wrong with sql)","reactions":{"url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/448/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/448/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/208","repository_url":"https://api.github.com/repos/ClickHouse/ClickHouse","labels_url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/208/labels{/name}","comments_url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/208/comments","events_url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/208/events","html_url":"https://github.com/ClickHouse/ClickHouse/issues/208","id":192271386,"node_id":"MDU6SXNzdWUxOTIyNzEzODY=","number":208,"title":"Statistics improvements","user":{"login":"hatarist","id":2741725,"node_id":"MDQ6VXNlcjI3NDE3MjU=","avatar_url":"https://avatars.githubusercontent.com/u/2741725?v=4","gravatar_id":"","url":"https://api.github.com/users/hatarist","html_url":"https://github.com/hatarist","followers_url":"https://api.github.com/users/hatarist/followers","following_url":"https://api.github.com/users/hatarist/following{/other_user}","gists_url":"https://api.github.com/users/hatarist/gists{/gist_id}","starred_url":"https://api.github.com/users/hatarist/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hatarist/subscriptions","organizations_url":"https://api.github.com/users/hatarist/orgs","repos_url":"https://api.github.com/users/hatarist/repos","events_url":"https://api.github.com/users/hatarist/events{/privacy}","received_events_url":"https://api.github.com/users/hatarist/received_events","type":"User","site_admin":false},"labels":[{"id":386401507,"node_id":"MDU6TGFiZWwzODY0MDE1MDc=","url":"https://api.github.com/repos/ClickHouse/ClickHouse/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null},{"id":1481327553,"node_id":"MDU6TGFiZWwxNDgxMzI3NTUz","url":"https://api.github.com/repos/ClickHouse/ClickHouse/labels/comp-http","name":"comp-http","color":"b5bcff","default":false,"description":"http protocol related"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":16,"created_at":"2016-11-29T12:40:42Z","updated_at":"2019-10-23T15:08:07Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"I think it'd be a little useful to send statistics in the HTTP header with the response (regardless of the FORMAT given).\r\n\r\nStats are currently sent only for JSON, JSONCompact and XML formats. It would be useful in some cases to get the stats while using format like TabSeparated or CSV.\r\n\r\nSomething like that:\r\n```\r\n$ curl -i \"http://127.0.0.1:8123/?query=SELECT+*+FROM+system.numbers+LIMIT+10+FORMAT+Null\"\r\nHTTP/1.1 200 OK\r\nDate: Tue, 29 Nov 2016 12:25:20 GMT\r\nConnection: Keep-Alive\r\nContent-Type: text/plain; charset=UTF-8\r\nTransfer-Encoding: chunked\r\nX-ClickHouse-rows: 10\r\nX-ClickHouse-rows-before-limit-at-least: 10\r\nX-ClickHouse-statistics-elapsed: 0.000107524\r\nX-ClickHouse-statistics-rows-read: 10\r\nX-ClickHouse-statistics-bytes-read: 80\r\n```\r\n\r\nAlso, would it be OK to include query's memory usage to the stats?","reactions":{"url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/208/reactions","total_count":9,"+1":9,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/208/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/157","repository_url":"https://api.github.com/repos/ClickHouse/ClickHouse","labels_url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/157/labels{/name}","comments_url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/157/comments","events_url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/157/events","html_url":"https://github.com/ClickHouse/ClickHouse/issues/157","id":186286979,"node_id":"MDU6SXNzdWUxODYyODY5Nzk=","number":157,"title":"Any plans for User-Agent header parsing?","user":{"login":"Abzac","id":2492123,"node_id":"MDQ6VXNlcjI0OTIxMjM=","avatar_url":"https://avatars.githubusercontent.com/u/2492123?v=4","gravatar_id":"","url":"https://api.github.com/users/Abzac","html_url":"https://github.com/Abzac","followers_url":"https://api.github.com/users/Abzac/followers","following_url":"https://api.github.com/users/Abzac/following{/other_user}","gists_url":"https://api.github.com/users/Abzac/gists{/gist_id}","starred_url":"https://api.github.com/users/Abzac/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Abzac/subscriptions","organizations_url":"https://api.github.com/users/Abzac/orgs","repos_url":"https://api.github.com/users/Abzac/repos","events_url":"https://api.github.com/users/Abzac/events{/privacy}","received_events_url":"https://api.github.com/users/Abzac/received_events","type":"User","site_admin":false},"labels":[{"id":520905553,"node_id":"MDU6TGFiZWw1MjA5MDU1NTM=","url":"https://api.github.com/repos/ClickHouse/ClickHouse/labels/feature","name":"feature","color":"1d76db","default":false,"description":null},{"id":1507871495,"node_id":"MDU6TGFiZWwxNTA3ODcxNDk1","url":"https://api.github.com/repos/ClickHouse/ClickHouse/labels/st-community-taken","name":"st-community-taken","color":"e5b890","default":false,"description":"External developer is working on that"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":19,"created_at":"2016-10-31T13:46:29Z","updated_at":"2020-09-02T13:09:48Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello!\r\n\r\nI want to parse vast amount of access logs loaded ClickHouse and extract operating system, browser and device type (mobile/desktop/search crawler bot) on-the-fly.\r\n\r\nDo you have any plans to make functions for parsing User-Agent (like functions for url parsing)?\r\n","reactions":{"url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/157/reactions","total_count":11,"+1":11,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/157/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/32","repository_url":"https://api.github.com/repos/ClickHouse/ClickHouse","labels_url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/32/labels{/name}","comments_url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/32/comments","events_url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/32/events","html_url":"https://github.com/ClickHouse/ClickHouse/issues/32","id":162301726,"node_id":"MDU6SXNzdWUxNjIzMDE3MjY=","number":32,"title":"Stored procedures","user":{"login":"gotlium","id":488554,"node_id":"MDQ6VXNlcjQ4ODU1NA==","avatar_url":"https://avatars.githubusercontent.com/u/488554?v=4","gravatar_id":"","url":"https://api.github.com/users/gotlium","html_url":"https://github.com/gotlium","followers_url":"https://api.github.com/users/gotlium/followers","following_url":"https://api.github.com/users/gotlium/following{/other_user}","gists_url":"https://api.github.com/users/gotlium/gists{/gist_id}","starred_url":"https://api.github.com/users/gotlium/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gotlium/subscriptions","organizations_url":"https://api.github.com/users/gotlium/orgs","repos_url":"https://api.github.com/users/gotlium/repos","events_url":"https://api.github.com/users/gotlium/events{/privacy}","received_events_url":"https://api.github.com/users/gotlium/received_events","type":"User","site_admin":false},"labels":[{"id":520905553,"node_id":"MDU6TGFiZWw1MjA5MDU1NTM=","url":"https://api.github.com/repos/ClickHouse/ClickHouse/labels/feature","name":"feature","color":"1d76db","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2016-06-25T22:05:28Z","updated_at":"2021-02-03T14:36:53Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi, what about stored procedures/functions/procedural languages?\n","reactions":{"url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/32/reactions","total_count":23,"+1":23,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/ClickHouse/ClickHouse/issues/32/timeline","performed_via_github_app":null}]
